@page "/"
@using Microsoft.JSInterop
@using SpotifyTopSongsApp.Services
@using SpotifyTopSongsApp.Models
@inject SpotifyService SpotifyService
@inject IJSRuntime JS
@inject YouTubeService YouTubeService

<div class="container">

    <h1 class="text-center mt-5 text-primary">
        🎉 Bienvenue sur <strong>Music World</strong>
    </h1>
    <p class="text-center text-muted mb-5">
        Explorez vos musiques préférées et découvrez de nouveaux sons chaque jour 🎧
    </p>

    <div class="text-center mb-4">
        <button class="btn btn-outline-secondary px-4" @onclick="ToggleTheme">
            @(isDarkMode ? "☀️ Thème clair" : "🌙 Thème sombre")
        </button>
    </div>

    <h2 class="mt-5 mb-3">🔥 Top chansons de la semaine</h2>
    @if (topTracks == null || topTracks.Count == 0)
    {
        <p>Chargement des tops chansons...</p>
    }
    else
    {
        <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 g-4">
            @foreach (var track in topTracks)
            {
                <div class="col">
                    <div class="card h-100 shadow-sm">
                        <img src="@track.ImageUrl" class="card-img-top img-fluid" alt="@track.TrackName" />
                        <div class="card-body">
                            <h5 class="card-title">@track.TrackName</h5>
                            <p class="card-text">🎤 @track.ArtistName</p>

                            <iframe src="https://open.spotify.com/embed/track/@GetSpotifyIdFromUrl(track.SpotifyLink)"
                                    width="100%" height="80"
                                    frameborder="0"
                                    allowtransparency="true"
                                    allow="encrypted-media">
                            </iframe>
                        </div>

                    </div>
                </div>
            }
        </div>
    }

    <h2 class="mt-5 mb-3">⭐ Top artistes du moment</h2>
    @if (topArtists == null || topArtists.Count == 0)
    {
        <p>Chargement des artistes...</p>
    }
    else
    {
        <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 g-4">
            @foreach (var artist in topArtists)
            {
                <div class="col">
                    <div class="card h-100 shadow-sm">
                        <img src="@artist.ImageUrl" class="card-img-top img-fluid" alt="@artist.Name" />
                        <div class="card-body">
                            <h5 class="card-title">@artist.Name</h5>
                            <a class="btn btn-outline-warning w-100" target="_blank" href="@artist.SpotifyLink">🔗 Voir le profil</a>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    <h2 class="mt-5 mb-3">🎬 Rechercher des clips YouTube</h2>

    <div class="mb-4">
        <input class="form-control mb-2" @bind="youtubeQuery" placeholder="Entrez un artiste ou un titre..." />
        <button class="btn btn-outline-primary mt-2" @onclick="SearchYouTube">🔍 Rechercher sur YouTube</button>
    </div>

    @if (youtubeVideoIds?.Count > 0)
    {
        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
            @foreach (var videoId in youtubeVideoIds)
            {
                <div class="col">
                    <div class="card shadow-sm">
                        <iframe class="card-img-top" width="100%" height="250"
                                src="https://www.youtube.com/embed/@videoId"
                                frameborder="0"
                                allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                                allowfullscreen>
                        </iframe>
                    </div>
                </div>
            }
        </div>
    }


</div>

@code {
    private List<SpotifyTrack> topTracks = new();
    private List<SpotifyTrack> topArtists = new();
    private bool isDarkMode = false;

    protected override async Task OnInitializedAsync()
    {
        var savedTheme = await JS.InvokeAsync<string>("localStorage.getItem", "theme");
        isDarkMode = savedTheme == "dark";
        await ApplyTheme();

        topTracks = await SpotifyService.GetTopTracksAsync();
        topArtists = await SpotifyService.GetTopArtistsAsync();
    }

    private async Task ToggleTheme()
    {
        isDarkMode = !isDarkMode;
        await JS.InvokeVoidAsync("localStorage.setItem", "theme", isDarkMode ? "dark" : "light");
        await ApplyTheme();
    }

    private async Task ApplyTheme()
    {
        var themeClass = isDarkMode ? "dark-theme" : "light-theme";
        await JS.InvokeVoidAsync("document.body.classList.remove", isDarkMode ? "light-theme" : "dark-theme");
        await JS.InvokeVoidAsync("document.body.classList.add", themeClass);
    }
    private string GetSpotifyIdFromUrl(string url)
    {
        if (string.IsNullOrEmpty(url)) return "";
        var parts = url.Split('/');
        return parts.LastOrDefault();
    }
    private string youtubeQuery = string.Empty;
    private List<string> youtubeVideoIds = new();

    private async Task SearchYouTube()
    {
        if (!string.IsNullOrWhiteSpace(youtubeQuery))
        {
            youtubeVideoIds = await YouTubeService.SearchVideoIdsAsync(youtubeQuery, 6);
        }
    }


}