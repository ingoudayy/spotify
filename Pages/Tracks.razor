@page "/tracks"
@using SpotifyTopSongsApp.Services
@using Blazored.LocalStorage
@using SpotifyTopSongsApp.Models
@inject ILocalStorageService LocalStorage
@inject SpotifyService SpotifyService

<h3 class="mt-3 mb-4"><i class="bi bi-music-note-list"></i> Recherche Spotify</h3>

<div class="input-group mb-3">
    <input @bind="searchQuery" @bind:event="oninput" class="form-control form-control-lg" placeholder="Recherchez un artiste, un album ou un titre..." />
    <button class="btn btn-success" @onclick="Search">🔍 Rechercher</button>
</div>

<select class="form-select mb-3" @bind="filterType">
    <option value="track">🎵 Titres</option>
    <option value="artist">👤 Artistes</option>
    <option value="album">💿 Albums</option>
</select>

@if (searchHistory?.Any() == true)
{
    <div class="mb-4">
        <label><strong>Recherches récentes :</strong></label>

        <button class="btn btn-danger btn-sm ms-2 mb-2" @onclick="ClearHistory">
            🧹 Effacer l'historique
        </button>

        <ul class="list-group">
            @foreach (var q in searchHistory)
            {
                <li class="list-group-item list-group-item-action" @onclick="@(() => RechercherDepuisHistorique(q))" style="cursor:pointer;">@q</li>
            }
        </ul>
    </div>
}

@if (!string.IsNullOrWhiteSpace(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}
else if (isLoading)
{
    <div class="text-center mt-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Chargement...</span>
        </div>
    </div>
}
else if (searchResults == null || !searchResults.Any())
{
    <div class="alert alert-warning">Aucun résultat trouvé.</div>
}
else
{
    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
        @foreach (var track in searchResults)
        {
            <div class="col">
                <div class="card h-100 shadow border-0">
                    <img src="@track.ImageUrl" class="card-img-top" alt="@track.ArtistName" />
                    <div class="card-body">
                        <h5 class="card-title">@track.TrackName</h5>
                        <p class="card-text mb-1">🎤 @track.ArtistName</p>
                        <p class="card-text small">
                            🔥 Popularité : <span class="badge bg-info">@track.Popularity</span><br />
                            ⏱️ Durée : @TimeSpan.FromMilliseconds(track.DurationMs).ToString(@"m\:ss")
                        </p>
                        <a class="btn btn-primary w-100" target="_blank" href="@track.SpotifyLink">🎧 Écouter</a>
                        <button class="btn btn-outline-warning mt-2 w-100" @onclick="() => AddToFavorites(track)">⭐ Ajouter aux favoris</button>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private string searchQuery = string.Empty;
    private string filterType = "track";
    private bool isLoading = false;
    private string errorMessage;
    private List<string> searchHistory = new();
    private List<SpotifyTrack> searchResults = new();

    protected override async Task OnInitializedAsync()
    {
        searchHistory = await LocalStorage.GetItemAsync<List<string>>("searchHistory") ?? new();
    }

    private async Task Search()
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
            return;

        if (!searchHistory.Contains(searchQuery))
        {
            searchHistory.Insert(0, searchQuery);
            if (searchHistory.Count > 5)
                searchHistory.RemoveAt(5);

            await LocalStorage.SetItemAsync("searchHistory", searchHistory);
        }

        try
        {
            isLoading = true;
            errorMessage = null;

            searchResults = await SpotifyService.SearchTracksAsync(searchQuery, filterType);

            if (!searchResults.Any())
                errorMessage = "Aucun résultat trouvé.";
        }
        catch (Exception ex)
        {
            errorMessage = $"Une erreur s'est produite : {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task AddToFavorites(SpotifyTrack track)
    {
        var favorites = await LocalStorage.GetItemAsync<List<SpotifyTrack>>("favorites") ?? new();

        if (!favorites.Any(f =>
            f.TrackName == track.TrackName &&
            f.ArtistName == track.ArtistName &&
            f.SpotifyLink == track.SpotifyLink))
        {
            favorites.Add(track);
            await LocalStorage.SetItemAsync("favorites", favorites);
            Console.WriteLine($"[DEBUG] Ajouté aux favoris : {track.TrackName}");
        }
        else
        {
            Console.WriteLine($"[DEBUG] Déjà dans les favoris : {track.TrackName}");
        }
    }

    private async Task RechercherDepuisHistorique(string query)
    {
        searchQuery = query;
        await Search();
    }

    private async Task ClearHistory()
    {
        searchHistory.Clear();
        await LocalStorage.RemoveItemAsync("searchHistory");
    }
}