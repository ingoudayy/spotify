@page "/favorites"
@using SpotifyTopSongsApp.Models
@using Blazored.LocalStorage
@inject ILocalStorageService LocalStorage

<h3 class="mt-3 mb-4">⭐ Mes Favoris</h3>

@if (favorites == null || !favorites.Any())
{
    <div class="alert alert-info">Aucun favori enregistré.</div>
}
else
{
    <button class="btn btn-outline-danger mb-3" @onclick="ClearAllFavorites">
        🧹 Vider tous les favoris
    </button>

    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
        @foreach (var track in favorites)
        {
            <div class="col">
                <div class="card h-100 shadow border-0">
                    <img src="@track.ImageUrl" class="card-img-top" alt="@track.ArtistName" />
                    <div class="card-body">
                        <h5 class="card-title">@track.TrackName</h5>
                        <p class="card-text mb-1">🎤 @track.ArtistName</p>
                        <p class="card-text small">
                            🔥 Popularité : <span class="badge bg-info">@track.Popularity</span><br />
                            ⏱️ Durée : @TimeSpan.FromMilliseconds(track.DurationMs).ToString(@"m\:ss")
                        </p>

                        @if (!string.IsNullOrWhiteSpace(track.AudioUrl))
                        {
                            <audio controls class="w-100 mb-2">
                                <source src="@track.AudioUrl" type="audio/mpeg">
                                Votre navigateur ne supporte pas l'audio.
                            </audio>
                        }

                        <a class="btn btn-primary w-100 mb-2" target="_blank" href="@track.SpotifyLink">🎧 Écouter sur Spotify</a>
                        <button class="btn btn-danger w-100" @onclick="() => RemoveFromFavorites(track)">🗑️ Supprimer</button>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<SpotifyTrack> favorites = new();

    protected override async Task OnInitializedAsync()
    {
        favorites = await LocalStorage.GetItemAsync<List<SpotifyTrack>>("favorites") ?? new();
        Console.WriteLine($"[DEBUG] Favoris chargés : {favorites.Count}");
    }

    private async Task RemoveFromFavorites(SpotifyTrack track)
    {
        var itemToRemove = favorites.FirstOrDefault(f =>
            f.TrackName == track.TrackName &&
            f.ArtistName == track.ArtistName &&
            f.SpotifyLink == track.SpotifyLink);

        if (itemToRemove != null)
        {
            favorites.Remove(itemToRemove);
            await LocalStorage.SetItemAsync("favorites", favorites);
            Console.WriteLine($"[DEBUG] Supprimé : {track.TrackName}");
        }
        else
        {
            Console.WriteLine($"[DEBUG] Rien trouvé à supprimer pour : {track.TrackName}");
        }
    }

    private async Task ClearAllFavorites()
    {
        favorites.Clear();
        await LocalStorage.RemoveItemAsync("favorites");
        Console.WriteLine("[DEBUG] Tous les favoris ont été supprimés");
    }
}
